#!/usr/bin/python3

# This script will add a cover art for all audio files in the directory
# There must be a `cover.jpg` in the directory which will be used as a cover
# All output files will be in mp3 format
# All input files will be automatically deleted

import os
import mimetypes
import subprocess

ffmpegCmd = "ffmpeg -v warning -i \"{input}\" -i cover.jpg -map 0:0 -map 1:0 -c copy -id3v2_version 3 -metadata:s:v title=\"Album cover\" -metadata:s:v comment=\"Cover(front)\" \"placeholder_{output}.mp3\""
filenameWithQuotes = "\"{file}\""


def filterAudio(file):
    # `file` should be an audio file
    isFile = os.path.isfile(file)
    guessType = mimetypes.guess_type(file)
    isNotNoneType = guessType[0] is not None
    isTypeMatched = isNotNoneType and 'audio' in guessType[0]

    if isFile and isTypeMatched:
        return True
    else:
        return False


audioList = list(filter(filterAudio, os.listdir()))

for file in audioList:
    filename = file[0:file.rfind(".")]
    fullCommand = ffmpegCmd.format(input=file, output=filename)
    print("\n", "Adding cover to", filenameWithQuotes.format(file=file))
    subprocess.call(fullCommand, shell=True)

# When FFmpeg is done, delete all the input files
audioList = list(filter(filterAudio, os.listdir()))

for file in audioList:
    if(not "placeholder_" in file):
        print("\n", "Removing", filenameWithQuotes.format(file=file))
        os.remove(file)

# After removing input files, the output files will also be renamed
# This will remove the 'placeholder_' in the filename
audioList = list(filter(filterAudio, os.listdir()))

for file in audioList:
    newName = file.replace("placeholder_", "")
    print("\n", "Renaming", filenameWithQuotes.format(file=file),
          "to", filenameWithQuotes.format(file=newName))
    os.rename(file, newName)
